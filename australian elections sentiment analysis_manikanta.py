# -*- coding: utf-8 -*-
"""Untitled1 aus.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rJIfr1MwXmFdPFPGGdhhCzkT6edROyZ8
"""

# Commented out IPython magic to ensure Python compatibility.
# !pip install matplotlib
import matplotlib
# %matplotlib inline

# from google.colab import drive
# drive.mount('/content/drive')

import pandas as pd
import numpy as np

location_data = pd.read_csv("/content/location_geocode.csv")

twitter_data = pd.read_csv("/content/auspol2019.csv")

twitter_data.shape

location_data.shape

twitter_data.head()

location_data.head()

twitter_data.isnull().sum()

location_data.isnull().sum()

twitter_data.dtypes

twitter_data = twitter_data.merge(location_data, how='inner', left_on='user_location', right_on='name')

twitter_data.head()

twitter_data.drop(["name"],axis=1,inplace=True)

twitter_data.shape

twitter_data.isnull().mean()*100

print(f"Data available from {twitter_data.created_at.min()}")
print(f"Data available up to {twitter_data.created_at.max()}")

print (f"Data available from {twitter_data.user_created_at.min()}")
print (f"Data available from {twitter_data.user_created_at.max()}")

import matplotlib.pyplot as plt
import seaborn as sns

#lets explore created_at column

twitter_data['created_at'] =  pd.to_datetime(twitter_data['created_at'])
cnt_srs = twitter_data['created_at'].dt.date.value_counts()
cnt_srs = cnt_srs.sort_index()
plt.figure(figsize=(14,6))
sns.barplot(cnt_srs.index, cnt_srs.values, alpha=0.8, color='black')
plt.xticks(rotation='vertical')
plt.xlabel('Date', fontsize=12)
plt.ylabel('Number of tweets', fontsize=12)
plt.title("Number of tweets according to dates")
plt.show()

#lets explore created_at column

twitter_data['user_created_at'] =  pd.to_datetime(twitter_data['user_created_at'])
count = twitter_data['user_created_at'].dt.date.value_counts()
count = count[:10,]
plt.figure(figsize=(14,6))
sns.barplot(count.index, count.values, alpha=0.8)
plt.title('Number of accounts created by Date')
plt.xticks(rotation='vertical')
plt.xlabel('Date', fontsize=12)
plt.ylabel('Number of tweets', fontsize=12)
plt.show()

cnt_srs = twitter_data['user_location'].value_counts()
# cnt_srs = twitter_data['user_location'].value_counts()
plt.figure(figsize=(14,6))
cnt_srs = cnt_srs[:30,]
sns.barplot(cnt_srs.index, cnt_srs.values, alpha=0.8, color='black')
plt.xticks(rotation='vertical')
plt.xlabel('states in australia', fontsize=12)
plt.ylabel('Number of tweets from countries', fontsize=12)
plt.title("county")
plt.show()
# ----------------------------------------------------------------------------------------------------



#lets extract the hours from the created_at and user_created_at column
twitter_data['created_at_hour'] = twitter_data['created_at'].dt.hour
twitter_data['user_created_at_hour'] = twitter_data['user_created_at'].dt.hour

print(f"MAximum number of retweets {twitter_data.retweet_count.max()}")
print(f"Minimum number of retweets {twitter_data.retweet_count.min()}")

print(f"MAximum number of favourites {twitter_data.favorite_count.max()}")

"""## checking which tweet has most retweeted"""

twitter_data.loc[twitter_data['retweet_count']==6622.0,'full_text'].values

twitter_data.user_name.value_counts()[:5,]

import re 
import tweepy 
from tweepy import OAuthHandler 
from textblob import TextBlob

twitter_data['sentiment']=twitter_data['full_text'].map(lambda full_text : TextBlob(full_text).sentiment.polarity)

print("3 random tweets with highest positive sentiment polarity: \n")
cL = twitter_data.loc[twitter_data.sentiment==1, ['full_text']].sample(3).values
for c in cL:
    print(c[0])
    print()

print("3 random tweets with highest positive sentiment polarity: \n")
cL = twitter_data.loc[twitter_data.sentiment==-1, ['full_text']].sample(3).values
for c in cL:
    print(c[0])
    print()

import nltk

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
from shapely.geometry import Point
# imp/ort geopandas as gpd
# from geopandas import GeoDataFrame
# %matplotlib inline


#PLOTLY

# cf.set_config_file(offline=True)
from textblob import TextBlob
from nltk.corpus import stopwords
# eng_stopwords = set(stopwords.words("english"))
# from wordcloud import WordCloud, STOPWORDS
from sklearn.decomposition import NMF, LatentDirichletAllocation, TruncatedSVD
from sklearn.feature_extraction.text import CountVectorizer
# import pyLDAvis.sklearn

# Commented out IPython magic to ensure Python compatibility.
import plotly
import plotly.plotly as py
import plotly.offline as offline
import plotly.graph_objs as go
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot
init_notebook_mode(connected=True)
import cufflinks as cf
from collections import defaultdict
from plotly import tools
from plotly.graph_objs import Scatter, Figure, Layout

import matplotlib
# %matplotlib inline

init_notebook_mode(connected=True)

from pylab import bone, pcolor, colorbar, plot, show, rcParams, savefig

trace1 = go.Histogram(
    x = twitter_data['sentiment'],
    opacity=0.75,
    name = "Sentiment",
    marker=dict(color='rgba(122, 75, 196, 0.6)'))

data = [trace1]
layout = go.Layout(barmode='overlay',
                   title='Histogram plot of sentiment',
                   xaxis=dict(title='Sentiment'),
                   yaxis=dict( title='Count'),
)
fig = go.Figure(data=data, layout=layout)
iplot(fig)

cut = pd.cut(
    twitter_data['sentiment'],
    [-np.inf, -.01, .01, np.inf],
    labels=['negative', 'neutral', 'positive']
)
twitter_data['polarity'] = cut.values
twitter_data[['polarity','sentiment']][:20]

import plotly
from plotly.offline import init_notebook_mode
import plotly.graph_objs as go
plotly.offline.init_notebook_mode(connected=True)

def enable_plotly_in_cell():  #use the fun in each cell to display the graph
  import IPython
  from plotly.offline import init_notebook_mode
  display(IPython.core.display.HTML('''
        <script src="/static/components/requirejs/require.js"></script>
  '''))
  init_notebook_mode(connected=False)

from plotly.offline import download_plotlyjs,plot, iplot, init_notebook_mode
init_notebook_mode(connected=True)

cf.go_offline()

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt 
import plotly 
import plotly.offline as pyoff 
import plotly.figure_factory as ff
from plotly.offline import init_notebook_mode, iplot, plot
import plotly.graph_objs as go
import plotly.plotly as py
# %matplotlib inline

from plotly.offline import init_notebook_mode
init_notebook_mode(connected=True)

trace1 = go.Scattermapbox(
            lat= twitter_data.loc[twitter_data['polarity'] == 'negative','lat'] ,
            lon= twitter_data.loc[twitter_data['polarity'] == 'negative','long'],
            mode='markers',
            marker=dict(
                size= 4,
                color = 'black',
                opacity = .5,
            ),
          )
trace2= go.Scattermapbox(
            lat= twitter_data.loc[twitter_data['polarity'] == 'neutral','lat'] ,
            lon= twitter_data.loc[twitter_data['polarity'] == 'neutral','long'],
            mode='markers',
            marker=dict(
                size= 4,
                color = 'blue',
                opacity = .3,
            ),
          )
trace3= go.Scattermapbox(
            lat= twitter_data.loc[twitter_data['polarity'] == 'positive','lat'] ,
            lon= twitter_data.loc[twitter_data['polarity'] == 'positive','long'],
            mode='markers',
            marker=dict(
                size= 4,
                color = 'gold',
                opacity = .2,
            ),
          )


data = [trace1,trace2,trace3]
layout = go.Layout(
    title = go.layout.Title(
        text = 'Tweets on Australia polls according to polarity by state '
    ),
    geo = go.layout.Geo(
        scope = 'world',
        projection = go.layout.geo.Projection(type = 'albers usa'),
        showlakes = True,
        lakecolor = 'rgb(200, 125, 255)'),
)

fig = go.Figure(data = data, layout = layout)
iplot(fig,show_link=True)

